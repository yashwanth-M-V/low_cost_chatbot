import os
import time
from llama_cpp import Llama
from dotenv import load_dotenv
import logging
import sys

load_dotenv()
MODEL_PATH = os.getenv("MISTRAL_MODEL_PATH")

# Configure logging
logging.basicConfig(level=logging.ERROR)

def load_mistral_model():
    try:
        return Llama(
            model_path=MODEL_PATH,
            n_ctx=512,
            n_gpu_layers=35,
            n_threads=6,
            n_threads_batch=6,
            offload_kqv=True,
            use_mmap=True,
            use_mlock=False,
            vocab_only=False,
            flash_attn=True,
            verbose=False,
            log_handler=None
        )
    except Exception as e:
        logging.error(f"Error loading Mistral model: {e}")
        return None

def main():
    # Suppress initial loading logs
    original_stderr = sys.stderr
    sys.stderr = open(os.devnull, 'w')
    
    start_load = time.time()
    mistral_llm = load_mistral_model()
    load_time = time.time() - start_load
    
    sys.stderr = original_stderr

    if not mistral_llm:
        print("Failed to load the Mistral model.")
        return

    print("\n" + "="*40)
    print("Mistral 7B Chat Assistant (type 'exit' to quit)")
    print(f"Model loaded in {load_time:.2f} seconds")
    print("="*40 + "\n")

    while True:
        try:
            # Get user input
            user_input = input("You: ")
            
            if user_input.lower() in ('exit', 'quit'):
                break
                
            if not user_input.strip():
                print("Please enter a valid question.\n")
                continue

            # Generate response
            start_response = time.time()
            output = mistral_llm(user_input, max_tokens=150, temperature=0.7)
            response_time = time.time() - start_response
            
            generated_text = output['choices'][0]['text'].strip()

            # Print formatted response
            print("\nAssistant:")
            print(f"{generated_text}")
            print(f"\n[Generated in {response_time:.2f} seconds | {len(generated_text.split())} tokens]")
            print("-"*50 + "\n")

        except KeyboardInterrupt:
            print("\nExiting...")
            break
        except Exception as e:
            print(f"\nError: {str(e)}")
            continue

if __name__ == "__main__":
    main()